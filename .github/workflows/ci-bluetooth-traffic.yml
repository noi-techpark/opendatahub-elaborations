name: CI/CD bluetooth-traffic

on:
  push:
    paths:
      - "bluetooth-traffic/**"
      - ".github/workflows/ci-bluetooth-traffic.yml"
      - "!*.md"

env:
  WORKING_DIRECTORY: bluetooth-traffic
  PROJECT_NAME: odh-mobility-el-bluetooth-traffic
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}/odh-mobility-el-bluetooth-traffic
  DOCKER_TAG: ${{ github.sha }}
  JAVA_VERSION: "8"
  PGPASSWORD: ${{ secrets.DB_PWD_PROD }}

jobs:
  test:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v1
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: "8"
          distribution: "temurin"
          cache: maven

      - name: Test with Maven
        run: mvn -B -U clean compile test
        working-directory: ${{ env.WORKING_DIRECTORY }}

  # Deploy Test
  deploy-test-bluetooth-traffic:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    needs: test
    concurrency: deploy-test-bluetooth-traffic
    env:
      DB_URL: ${{ secrets.DB_URL_TEST }}
      DB_USER: ${{ secrets.DB_USER_TEST }}
      DB_PWD: ${{ secrets.DB_PWD_TEST }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Copy deltart.sql to server
        uses: noi-techpark/github-actions/ssh-scp@v2
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-host: ${{ secrets.SSH_HOST_TEST }}
          local-path: bluetooth-traffic/deltart.sql

      #   psql -h ${{ env.DB_URL }} -U ${{ env.DB_USR }} bdp ${{ env.DB_PWD }} < bluetooth-traffic/deltart.sql
      - name: Import delta function into psql
        uses: noi-techpark/github-actions/psql-over-ssh@v2
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-host: ${{ secrets.SSH_HOST_TEST }}
          ssh-setup: false
          db-host: ${{ env.DB_URL }}
          db-password: ${{ env.DB_PWD }}
          db-query: < /home/noi-techpark-bot/deltart.sql

      - name: Create .env file
        uses: noi-techpark/github-actions/env-file@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          # General deployment options
          X_COMPOSE_PROJECT_NAME: ${{ env.PROJECT_NAME }}
          X_DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          X_DOCKER_TAG: ${{ env.DOCKER_TAG }}
          X_JAVA_OPTIONS: -Xms128m -Xmx512m

          X_JDBC_URL: jdbc:postgresql://${{ env.DB_URL }}:5432/bdp?user=${{ env.DB_USER }}&password=${{ env.DB_PWD }}

          # Logging
          X_LOG_LEVEL: info
          X_LOG_STYLE: json

      - name: Build project
        uses: noi-techpark/github-actions/maven-build@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          java-version: ${{ env.JAVA_VERSION }}
          build-command: "mvn -B -DskipTests -DfinalName=ROOT clean package"

      - name: Build and push images
        uses: noi-techpark/github-actions/docker-build-and-push@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure
          docker-username: ${{ github.actor }}
          docker-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy application
        uses: noi-techpark/github-actions/docker-deploy@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure/ansible
          hosts: "test"
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-setup: false
          docker-username: "noi-techpark-bot"
          docker-password: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          project-name: ${{ env.PROJECT_NAME }}

  # Deploy Prod
  deploy-prod-bluetooth-traffic:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/prod'
    needs: test
    concurrency: deploy-prod-bluetooth-traffic
    env:
      DB_URL: ${{ secrets.DB_URL_PROD }}
      DB_USER: ${{ secrets.DB_USER_PROD }}
      DB_PWD: ${{ secrets.DB_PWD_PROD }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Copy deltart.sql to server
        uses: noi-techpark/github-actions/ssh-scp@v2
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-host: ${{ secrets.SSH_HOST_TEST }}
          local-path: bluetooth-traffic/deltart.sql

      #   psql -h ${{ env.DB_URL }} -U ${{ env.DB_USR }} bdp ${{ env.DB_PWD }} < bluetooth-traffic/deltart.sql
      #   Commented out because it uses a test host to access production, which is not allowed with new security groups anymore.
      # - name: Import delta function into psql
      #   uses: noi-techpark/github-actions/psql-over-ssh@v2
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     ssh-host: ${{ secrets.SSH_HOST_TEST }}
      #     ssh-setup: false
      #     db-host: ${{ env.DB_URL }}
      #     db-password: ${{ env.DB_PWD }}
      #     db-query: < /home/noi-techpark-bot/deltart.sql

      - name: Create .env file
        uses: noi-techpark/github-actions/env-file@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          # General deployment options
          X_COMPOSE_PROJECT_NAME: ${{ env.PROJECT_NAME }}
          X_DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          X_DOCKER_TAG: ${{ env.DOCKER_TAG }}
          X_JAVA_OPTIONS: -Xms128m -Xmx512m

          X_JDBC_URL: jdbc:postgresql://${{ env.DB_URL }}:5432/bdp?user=${{ env.DB_USER }}&password=${{ env.DB_PWD }}

          # Logging
          X_LOG_LEVEL: info
          X_LOG_STYLE: json

      - name: Build project
        uses: noi-techpark/github-actions/maven-build@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          java-version: ${{ env.JAVA_VERSION }}
          build-command: "mvn -B -DskipTests -DfinalName=ROOT clean package"

      - name: Build and push images
        uses: noi-techpark/github-actions/docker-build-and-push@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure
          docker-username: ${{ github.actor }}
          docker-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy application
        uses: noi-techpark/github-actions/docker-deploy@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure/ansible
          hosts: "prod"
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-setup: false
          docker-username: "noi-techpark-bot"
          docker-password: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          project-name: ${{ env.PROJECT_NAME }}

